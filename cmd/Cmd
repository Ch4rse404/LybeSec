import requests
import json
import telebot
import time
import os

previous_data = None   
expected = 0
cor_atual = "Q"        
analise_sinal = False
banca = 100    
entrada = 0       
erros = 0     
acertos = 0          
max_gale = 2           

token = 'token' # BOT TOKEN
chat_id = 'id chat' # CHAT ID DO CANAL ONDE DESEJA ENVIAR MSG

bot = telebot.TeleBot(token)

def enviarMenssagem(text):
    url_base = f'https://api.telegram.org/bot{token}/sendMessage?chat_id={chat_id}&text={text}'
    requests.get(url_base)


enviarMenssagem('''
frase ao iniciar o bot
''')

def enviar_sinal(cor, padrao):
    global banca
    global entrada
    global cor_atual
    cor_atual = cor

    p1 = "𝗦𝗜𝗡𝗔𝗟 𝗖𝗢𝗡𝗙𝗜𝗥𝗠𝗔𝗗𝗢"
    p2 = "🔰Padrão:" + padrao
    p3 = "🎯Entrada:" + cor_atual
    p4 = "Buscar apoio no ⚪️"
    p5 = "🐓2 martingale: (opcional)"
    enviarMenssagem(p1+"\n\n"+p2+"\n\n"+p3+"\n\n"+p4+"\n\n"+p5)

def enviarStatus(v1, v2): 
    global acertos
    global erros
    global banca

    t1 = float(v1)
    t2 = float(v2)
    t3 = t1 + t2
    t4 = "💥 𝗦𝗜𝗡𝗔𝗟 𝗦𝗧𝗔𝗧𝗨𝗦 💥"
    p2 = "🎯 𝗔𝗰𝗲𝗿𝘁𝗼𝘀 " + str(v1)
    p3 = "⛔️ 𝗘𝗿𝗿𝗼𝘀: " + str(v2)
    p4 = "📌 𝗥𝗼𝗱𝗮𝗱𝗮𝘀:" + str(t3)
    p5 = "⚠️ 𝗔𝗹𝗲𝗿𝘁𝗮: Entre até o 2x Martingale"
    enviarMenssagem(t4+"\n\n"+p2+"\n\n"+p3+"\n\n"+p4+"\n\n"+p5)



def win():
    global acertos
    global erros
    global analise_sinal
    global entrada
    global banca
    global cor_atual
    acertos += 1
    entrada = 0
    #bot = telebot.TeleBot(token)
    p1 = "✅ GREEN CONFIRMADO NO" + cor_atual
    p2 = "AGUARDE O PROXIMO SINAL 🍀"
    enviarMenssagem(p1+"\n\n"+p2)
    #bot.send_sticker(chat_id, '✅✅')
    enviarStatus(acertos, erros)
    analise_sinal = False

def loss():
    global acertos
    global analise_sinal
    global erros
    erros += 1
    #bot = telebot.TeleBot(token)
    p1 = "❌ PERDEMOS MAS RECUPERAMOS NA PROXIMA"
    p2 = "AGUARDE O PROXIMO SINAL 🍀"
    enviarMenssagem(p1+"\n\n"+p2)
    enviarStatus(acertos, erros)
    analise_sinal = False


def validate_gale():
    global entrada
    global expected
    global max_gale
    global cor_atual
    global banca
    entrada += 1
    if entrada <= max_gale:

        p1 = "⚠️ atenção: "+ str(entrada) + " Martingale ⚠️" 
        p2 = "⚠️ entrar novamente no " + cor_atual
        
        enviarMenssagem(p1+"\n\n"+p2)
    else:
        entrada = 0
        loss()

def validate_game(cor):
    if cor[0] == expected:
        win()
    elif cor[0] == 'B':
        win()
    else:
        validate_gale()

def analyze_game(cores):
    global analise_sinal
    global expected

    if cores[0] == 'V' and cores[2] == 'P' and cores[3] == 'B' and cores[4] == 'V':
        analise_sinal = True
        expected = "V"
        print("Foi encontrada a sequencia esperimental  👻Ghost👻")
        enviar_sinal("🛑", "👻Ghost👻")
        
    elif cores[0] == 'V' and cores[2] == 'V' and cores[3] == 'B' and cores[4] == 'P':
        analise_sinal = True
        expected = "P"
        print("Foi encontrada a sequencia esperimental  ⚜️Master⚜️")
        enviar_sinal("⚫️", "⚜️Master⚜️")
    
    elif cores[0] == 'V' and cores[2] == 'V' and cores[3] == 'P' and cores[4] == 'V':
        analise_sinal = True
        expected = "P"
        print("Foi encontrada a sequencia esperimental  👑King👑")
        enviar_sinal("⚫️", "👑King👑")
        
    elif cores[0] == 'P' and cores[2] == 'B' and cores[3] == 'P':
        analise_sinal = True
        expected = "V"
        print("Foi encontrada a sequencia esperimental  🍀Lotus🍀")
        enviar_sinal("🛑", "🍀Lotus🍀")
        
    elif cores[0] == 'P' and cores[2] == 'V' and cores[3] == 'V' and cores[4] == 'B':
        analise_sinal = True
        expected = "V"
        print("Foi encontrada a sequencia esperimental  💮Long💮")
        enviar_sinal("🛑", "💮Long💮")
    
    elif cores[0] == 'P' and cores[2] == 'B' and cores[3] == 'V' and cores[4] == 'P':
        analise_sinal = True
        expected = "V"
        print("Foi encontrada a sequencia esperimental  💟Love💟")
        enviar_sinal("🛑", "💟Love💟")
        
while True:
    url = "https://blaze.com/api/roulette_games/recent"
    req = requests.get(url)
    if req.status_code == 200:
        data = json.loads(req.content)
        jogo = [x['color'] for x in data]
        resultado = jogo
        conversor = {0: 'B', 1: 'V', 2: 'P'}
        resultado = [conversor[x] for x in resultado]
        if previous_data != resultado:
            print(resultado)
            if analise_sinal == True:
                validate_game(resultado)
            else:
                analyze_game(resultado)

            previous_data = resultado
    else:
        print("Erro ao obter dados da API")
    time.sleep(10)
